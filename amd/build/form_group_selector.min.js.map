{"version":3,"file":"form_group_selector.min.js","sources":["../src/form_group_selector.js"],"sourcesContent":["// This file is part of Moodle - https://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Provides the required functionality for an autocomplete element to select a group.\n * Most pieces of this code are borrowed from the core\\form_user_selector.\n *\n * @module      local_invitation/form_group_selector\n * @copyright   2024 Andreas Grabs\n * @license     http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport Ajax from 'core/ajax';\nimport {render as renderTemplate} from 'core/templates';\n\n/**\n * Load the list of groups matching the query and render the selector labels for them.\n * The function is called by the auto complete element.\n *\n * @param {String} selector The selector of the auto complete element.\n * @param {String} query The query string.\n * @param {Function} callback A callback function receiving an array of results.\n * @param {Function} failure A function to call in case of failure, receiving the error message.\n */\nexport async function transport(selector, query, callback, failure) {\n\n    const selectorElement = document.querySelector(selector);\n    const myServiceName = 'local_invitation_search_groups';\n    const myLabelTemplate = 'local_invitation/form_group_selector_suggestion';\n\n    const request = {\n        methodname: myServiceName,\n        args: {\n            courseid: selectorElement.getAttribute('courseid'),\n            query: query\n        }\n    };\n\n    try {\n        const response = await Ajax.call([request])[0];\n\n        let labels = [];\n        response.list.forEach(group => {\n            labels.push(renderTemplate(myLabelTemplate, group));\n        });\n        labels = await Promise.all(labels);\n\n        response.list.forEach((group, index) => {\n            group.label = labels[index];\n        });\n\n        callback(response.list);\n\n    } catch (e) {\n        failure(e);\n    }\n}\n\n/**\n * Process the results for auto complete elements.\n * The function is called by the auto complete element.\n *\n * @param {String} selector The selector of the auto complete element.\n * @param {Array} results An array or results returned by {@see transport()}.\n * @return {Array} New array of the selector options.\n */\nexport function processResults(selector, results) {\n\n    if (!Array.isArray(results)) {\n        return results;\n\n    } else {\n        return results.map(result => ({value: result.id, label: result.label}));\n    }\n}\n"],"names":["selector","results","Array","isArray","map","result","value","id","label","query","callback","failure","selectorElement","document","querySelector","request","methodname","args","courseid","getAttribute","response","Ajax","call","labels","list","forEach","group","push","Promise","all","index","e"],"mappings":";;;;;;;;8FA8E+BA,SAAUC,gBAEhCC,MAAMC,QAAQF,SAIRA,QAAQG,KAAIC,UAAYC,MAAOD,OAAOE,GAAIC,MAAOH,OAAOG,UAHxDP,2CA7CiBD,SAAUS,MAAOC,SAAUC,eAEjDC,gBAAkBC,SAASC,cAAcd,UAIzCe,QAAU,CACZC,WAJkB,iCAKlBC,KAAM,CACFC,SAAUN,gBAAgBO,aAAa,YACvCV,MAAOA,kBAKLW,eAAiBC,cAAKC,KAAK,CAACP,UAAU,OAExCQ,OAAS,GACbH,SAASI,KAAKC,SAAQC,QAClBH,OAAOI,MAAK,qBAfI,kDAe4BD,WAEhDH,aAAeK,QAAQC,IAAIN,QAE3BH,SAASI,KAAKC,SAAQ,CAACC,MAAOI,SAC1BJ,MAAMlB,MAAQe,OAAOO,UAGzBpB,SAASU,SAASI,MAEpB,MAAOO,GACLpB,QAAQoB"}